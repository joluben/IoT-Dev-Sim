# =============================================================================
# DevSim Frontend Production Dockerfile
# =============================================================================
# Multi-stage build for optimized production deployment with:
# - Nginx with SSL/TLS support
# - Security headers
# - Rate limiting
# - Gzip compression
# =============================================================================

FROM nginx:1.25-alpine

# Install required packages for SSL and security
RUN apk add --no-cache \
    curl \
    openssl \
    certbot \
    certbot-nginx

# Create directories for SSL certificates and logs
RUN mkdir -p /etc/letsencrypt \
    && mkdir -p /var/www/certbot \
    && mkdir -p /var/log/nginx \
    && mkdir -p /etc/nginx/ssl

# Copy static files
COPY static/ /usr/share/nginx/html/

# Copy production nginx configuration
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Remove default nginx configuration
RUN rm -f /etc/nginx/conf.d/default.conf.bak

# Create nginx user and set permissions
RUN addgroup -g 101 -S nginx \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /etc/nginx/ssl

# Generate self-signed certificate for initial startup (before Let's Encrypt)
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/selfsigned.key \
    -out /etc/nginx/ssl/selfsigned.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

# Copy startup script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# Expose ports
EXPOSE 80 443

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]